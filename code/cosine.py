# -*- coding: utf-8 -*-
"""cosine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZOicJlUl4RwARPczFpFf4Z7TuWHv5YJy

# Setup
"""

import pandas as pd
import numpy as np
import os
import pickle

from google.colab import drive
drive.mount('/content/drive')

# replace the dir if need
DOOR_DIR = "/content/drive/MyDrive/OneCareer/Project - G5/Dataset/" # Henry's dir
# DOOR_DIR = "/content/drive/MyDrive/Project - G5/Dataset/"    #Lejia's dir
#DOOR_DIR = "/content/drive/MyDrive/Project - G5/Dataset/" #Nan's dir
#DOOR_DIR = "/content/drive/MyDrive/Project - G5/Dataset" 

f1 = DOOR_DIR + "MeetFresh_Menu_Drink.csv"
f2 = DOOR_DIR + "MeetFresh_Menu_Food.csv"
f3 = DOOR_DIR + "survey.csv"

# df1 = pd.read_csv(f1)
df2 = pd.read_csv(f2)
df3 = pd.read_csv(f3)

"""# EDA"""

df3.info()

df3.head(3)

df3['sensitivity on price'].unique()

#sensitive plot
import plotly.graph_objs as go
go.Figure(
    data=[go.Histogram(x=df3["sensitivity on price"], xbins={"start": 1.0, "end": 5.2, "size": 0.25})],
    layout=go.Layout(title="Histogram of sensitivity on price", yaxis={"title": "Count"}, bargap=0.05),
    )

# Age histogram
go.Figure(
    data=[go.Histogram(x=df3["age "], xbins={"start": 15, "end": 66, "size": 3.0})],
    layout=go.Layout(title="Histogram of age ", yaxis={"title": "Count"}, bargap=0.05),
    )

# Peanut 
import plotly.express as px
fig = px.violin(df3, x='Peanuts')
fig

"""# Preprocessing"""

df3['gender'].replace(['F', 'M'], [0, 1], inplace=True)
df3['ethnicity'].replace(['Asian', 'White','Black','Hispanic'], [1,2,3,4], inplace=True)
df3['hot or cold'].replace(['H', 'C'], [0,1], inplace=True)
df3.head()



"""# Model"""

from sklearn.metrics.pairwise import cosine_similarity

new_description = pd.Series('F Asian 2')

"""## Sample"""

v1 = np.array([[0, 0, 2]])
v2 = np.array([[1, 0, 5]])

print(cosine_similarity(v2, v1))

"""## Actual Model"""

# drop unused col
# Note: this step is needed since we don't ask these three features from the user's input
df3_drop = df3.drop(['current state','Favorite Dish ','user_id'], axis=1)

raw_input = [0, 24, 1, 5, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
input = np.array([raw_input], dtype=np.int32)

def compute_cosine(input: np.array, df: pd.DataFrame) -> list():
  '''
    Compute recommendation based on one user profile (aka user feature vector) 
    against with all other users in the sample.

    INPUT:
      input: 2D numpy array with 17 user features
      df: pandas dataframe type which contains n user survey data

    OUTPUT:
      result: a list of cosine similarity score
        - note: the order of the list is in the correct corresponding the row of the sample,
                any col shuffle must be extended across the sample.
  '''
  result = list()

  for i in range(len(df.index)):
    result.append(cosine_similarity(
        input,
        np.array([df.iloc[i].values], dtype=np.int32)
        )
    )
  
  return result

sim_list = compute_cosine(input, df3_drop)

sim_list

"""---"""

from pandas.util.testing import assert_frame_equal

class product_return(object): 
  '''
  Return recommended product based on similarity between users who access the content 
  '''
  def __init__(self,match_list,product_data,customer_data):
    self.sim_list = sim_list 
    self.product_data = df2
    self.customer_data = df3
    self.T=0.99
  
  def product_recommended_code(self):
    self.customer_data['rank_score'] = self.sim_list
    self.customer_data['rank_score'] = self.customer_data['rank_score'].astype(float, errors = 'raise')
    most_similar_user = self.customer_data[self.customer_data['rank_score']>self.T].sort_values('rank_score').head(5)
    ##most_similar_user = pd.DataFrame(most_similar_user).transpose()
    product_recommended_code = most_similar_user['Favorite Dish ']
    return product_recommended_code

product_recommended_code = product_return(sim_list,df2,df3).product_recommended_code()
print(product_recommended_code)

product_recommended_code = product_recommended_code[1]

df2.head()

item_name = df2.loc[df2['Item ID'] == product_recommended_code, 'Item Name (ENG)']

item_name







"""##Web Application"""

!pip install -q streamlit

!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip

!unzip ngrok-stable-linux-amd64.zip

get_ipython().system_raw('./ngrok http 8501 &')

!curl -s http://localhost:4040/api/tunnels | python3 -c \
    'import sys, json; print("Execute the next cell and the go to the following URL: " +json.load(sys.stdin)["tunnels"][0]["public_url"])'



import streamlit as st
st.title("Hello GeeksForGeeks !!!")

!streamlit run /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py